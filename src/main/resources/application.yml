spring:
  jwt:
    secret: ${secret}
  profiles:
    # develop : develop 환경에서 application run 을 실행
    # production : 실 사용자가 사용하는 환경에서 application run 을 실행
    # staging : 실 사용자는 없지만, 마지막 테스트 환경에서 application run 을 실행
    active: none # <develop, production, staging, none> 옵션
    # application-oauth2.yml 파일을 별도로 관리
    include: oauth2
  datasource:
    # MySQL
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${url}
    username: ${username}
    password: ${password}
    # H2
#    url: jdbc:h2:tcp://localhost/~/pushop
#    username: pu
#    password:
#    driver-class-name: org.h2.Driver
  mail:
    username: gokorea1214@naver.com
    password: ${password}
    host: smtp.naver.com
    port: 465
    auth-code-expiration-millis: 1800000  # 30분
  #  main:
  #    allow-bean-definition-overriding: true

  #  create	기존테이블을 삭제하고 다시 생성
  #  create-drop 기존테이블을 삭제하고 다시생성. 종료 시점에 테이블삭제
  #  update	변경된 스키마 적용 (운영 DB 에서 사용X)
  #  validate Entity 와 테이블이 정상 매핑 되었는지 확인
  #  none 기존테이블을 더 이상 건드리지 않음.
  jpa:
    hibernate:
      ddl-auto: none
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
    properties:
      hibernate:
        #        show_sql: true
        format_sql: true
        default_batch_fetch_size: 1000 #최적화 옵션

  redis:
    host: ${host}
    port: 6379

#    show_sql: true
  data:
    redis:
      host: ${host}
      port: 995
  web:
    resources:
      static-locations: classpath:/static/,file:/static/

  backend:
    url: ${url}
  frontend:
    url: ${url}


#    open-in-view: false

# iamport
imp:
  api:
    key: ${key}
    secretkey: ${secretkey}

logging.level.org.hibernate:
  SQL: debug
#  org.hibernate.type: trace
#  jdbc:h2:~/pushop

custom:
  requires-role:
    enabled: false